#include<stdio.h>
#include<string.h>
#include<pthread.h>
#include<stdlib.h>
#include<unistd.h>
#include <unistd.h>
#include <sys/syscall.h>
#ifndef SYS_gettid
#error "SYS_gettid unavailable on this system"
#endif
#define gettid() ((pid_t)syscall(SYS_gettid))
#include <stdio.h>
#define NUM 2

pthread_t tid[NUM];
int counter=0;
pthread_mutex_t lock;

void* Tasks1(void *arg){
     unsigned int i = 0;
     counter ++;
    for(i=0; i<100; i++){
        pthread_mutex_lock(&lock);
        printf("\n Job %d #%d started task 1\n", gettid(), i+1);
        printf("\n Job %d #%d finished task 1\n", gettid(), i+1);
        pthread_mutex_unlock(&lock);
    }
    return NULL;
}

void* Tasks2(void *arg){
    unsigned int i = 0;
    counter += 1;
    for(i=0; i<100; i++){
        pthread_mutex_lock(&lock);
        printf("\n Job %d #%d started task 2\n", gettid(), i+1);
        printf("\n Job %d #%d finished task 2\n", gettid(), i+1);
        pthread_mutex_unlock(&lock);
    }
    return NULL;
}

int main(void)
{
    int i = 0;
    int err;

    if (pthread_mutex_init(&lock, NULL) != 0)
    {
        printf("\n mutex init failed\n");
        return 1;
    }

    for(i=0; i<NUM; i++){
        if(i==0)
            err = pthread_create(&(tid[i]), NULL, &Tasks1, NULL);
        else if (i==1)
            err = pthread_create(&(tid[i]), NULL, &Tasks2, NULL);
        if (err != 0)
            printf("\nthread creation failed :[%s]", strerror(err));
    }

    for(i=0; i<NUM; i++)
         pthread_join(tid[i], NULL);
    
    pthread_mutex_destroy(&lock);
    printf("The end");

    return 0;
}